-- Rules for the 'Roller' parser
-- Written in Labelled BNF grammar as used by bnfc
-- mrZalli

ExpCmd.		Cmd ::= Exp;
StmtCmd.	Cmd ::= Stmt;

token VarIdent	(letter | '_')+;
--token VarIdent	( ('a'-'c') | ('e'-'z') | upper ) ( letter | '_' )*;

-- These are parsed in the interactive parser by C/C++ libraries
token IntLiteral '-'? digit+;
token FloatLiteral '-'? digit+ '.' digit+ ('e' '-'? digit+)?;

comment "//";
comment "/*" "*/";


-- Expressions --

coercions Exp 4;

EAdd. 	Exp1 	::= Exp1 "+" Exp2;
ESub. 	Exp1 	::= Exp1 "-" Exp2;
EMul. 	Exp2 	::= Exp2 "*" Exp3;
EDiv. 	Exp2 	::= Exp2 "/" Exp3;
EPow.	Exp3	::= Exp3 "^" Exp4;

separator Exp ",";


-- -- Values -- --

-- An integer numeral value.
NumInt.		Numeral	::= IntLiteral;
NumFloat.	Numeral ::= FloatLiteral;

-- An integer literal, string or variable value
EVal. 	Exp3	::= Val;

ValNum.	Val	::= Numeral;
ValVar.	Val	::= VarIdent;
ValStr.	Val	::= String;


-- -- Sequences -- --

EList.		Exp3	::= "{" [Exp] "}";


-- -- Ranges -- --

ERange.		Exp			::= ExpRange;

-- Ranges use numeral values and a linear step is assumed with the default of 1
-- These can be treated as objects or sequences, but trying to evaluate the sequence to the infinite end of an
-- infinite range should be a terminating error.

Range.		ExpRange	::= Exp ".." Exp;
RStep.		ExpRange	::= Exp "," Exp2 ".." Exp3;

RInf.		ExpRange	::= Exp "..";
RStepInf.	ExpRange	::= Exp "," Exp2 "..";
RNInf.		ExpRange	::= ".." Exp;
RStepNInf.	ExpRange	::= ".." Exp "," Exp2;


-- -- Dice expressions -- --

EDice.	Exp3	::= ExpD;

E1d6.	ExpD	::= "d";
E1dN.	ExpD	::= "d" Exp4;
ENd6.	ExpD	::= Exp3 "d";
ENdN.	ExpD	::= Exp3 "d" Exp4;


-- -- Keyword functions -- --

EKeyW.		Exp		::= ExpKW;

-- Repeats the second expression according to the value of the first expression (must be positive integer).
-- Returns a list with each expression's value.
-- Possibility: Add a repeat statement that can only call statements and doesn't return anything.
EKWRepeat.	ExpKW	::= "Repeat" Exp ":" Exp;

-- Gives the length of a sequence. Gives 1 for single values
EKWCount.	ExpKW	::= "Count" Exp;

-- Gives the sum of a sequence. default operation when converting from a sequence to a single value
EKWSum.		ExpKW	::= "Sum" Exp;

-- Gives the mean value of a sequence. Same as Sum divided by Count
EKWMean.	ExpKW	::= "Mean" Exp; 

-- Gives squareroot of the value, or for each of the sequences values
-- Gives an error in negative values
EKWSqrt.	ExpKW	::= "Sqrt" Exp;

-- Rounding operations. Truncation is the default when changing floats to ints.
EKWFloor.	ExpKW	::=	"Floor" Exp;	-- Rounds down
EKWCeil.	ExpKW	::= "Ceil" Exp;		-- Rounds up
EKWRound.	ExpKW	::= "Round" Exp;	-- Rounds towards nearest integer, 0.5 is rounded up
EKWTrunc.	ExpKW	::= "Trunc" Exp;	-- Rounds towards zero

-- Performs accumulation/folding operation.
-- Also maps if there is only one parameter for the function
EKWAcc.		ExpKW	::= "Acc" Exp VarIdent;


-- -- List operations -- --

coercions Pred 3;

PredBranch.	Pred1	::= Pred1 "," Pred2;
PredAnd.	Pred1	::= Pred1 "&" Pred2;
PredOr.		Pred1	::= Pred1 "|" Pred2;
PredXOr.	Pred1	::= Pred1 "^" Pred2;

PredEQ.		Pred2	::= "=" Val;
--PredNEQ.	Pred2	::= "!=" Val;
PredGT.		Pred2	::= "<" Val;
PredLT.		Pred2	::= ">" Val;
PredGTEq.	Pred2	::= "<=" Val;
PredLTEq.	Pred2	::= ">=" Val;

-- Negates the predicate.
PredNot.	Pred3	::= "!" Pred;

PredIsStr.	Pred3	::= "$";
PredIsInt.	Pred3	::= "#";
PredIsFloat.Pred3	::= "%";

PredInd.	Pred3	::= Val; -- Indexes
PredRange.	Pred3	::= ExpRange; -- Slices

ESeqFilt.	Exp3	::= Exp "[" Pred "]"; -- Predicate expression, filters or indexes the vector


-- Function call --

ECall.	Exp3	::= VarIdent "(" [Exp] ")";


-- Statements --

SVarAs.		Stmt	::= VarIdent "=" Exp;
SFunDef.	Stmt	::= VarIdent "(" [Exp] ")" "=" Exp;
