-- Rules for the 'Roller' parser
-- Written in Labelled BNF grammar as used by bnfc
-- mrZalli

ExpCmd.		Cmd ::= Exp;
StmtCmd.	Cmd ::= Stmt;

token VarIdent	(letter | '_')+;
token Newline	'\n';

comment "//";
comment "/*" "*/";


-- Expressions --

separator Exp ",";

_.		Exp		::= Exp1;
_.		Exp1	::= Exp2;
_.		Exp2	::= Exp3;
_.		Exp3	::= Exp4;
_.		Exp4	::= "(" Exp ")";

EAdd. 	Exp1 	::= Exp1 "+" Exp2;
ESub. 	Exp1 	::= Exp1 "-" Exp2;
EMul. 	Exp2 	::= Exp2 "*" Exp3;
EDiv. 	Exp2 	::= Exp2 "/" Exp3; -- returns floating point and/or integer + modulo
EPow.	Exp3	::= Exp3 "^" Exp4; -- exponent

ENeg.	Exp4	::= "-" Exp;


-- -- Values -- --

-- Numeral is an integer or floating point value.
NumInt.		Numeral	::= Integer;
NumFloat.	Numeral ::= Double;

-- Val is an integer literal, string or variable value
EVal. 	Exp4	::= Val;

ValNum.	Val		::= Numeral;
ValVar.	Val		::= VarIdent;
ValStr.	Val		::= String;


-- -- Sequences -- --

EList.		Exp4	::= "{" [Exp] "}";
ERange.		Exp4	::= "{" Range "}";


-- -- Ranges -- --

-- Ranges use numeral values and a linear step is assumed with the default of 1
-- These can be treated as objects or sequences, but trying to evaluate the sequence to the infinite end of an
-- infinite range should be a terminating error.

--ERange.		Exp3		::= Range;

RSimple.	Range		::= Exp ".." Exp;
RStep.		Range		::= Exp "," Exp ".." Exp;
RInf.		Range		::= Exp "..";
RStepInf.	Range		::= Exp "," Exp "..";


-- -- Dice expressions -- --

EDice.	Exp3	::= ExpD;

E1d6.	ExpD	::= "d";
E1dN.	ExpD	::= "d" Exp4;
ENd6.	ExpD	::= Exp3 "d";
ENdN.	ExpD	::= Exp3 "d" Exp4;


-- -- Keyword expressions -- --

EKeyW.		Exp4		::= ExpKW;

-- Gives the length of a sequence. Gives 1 for single values
EKWCount.	ExpKW	::= "Count" Exp;

-- Gives the sum of a sequence. default operation when converting from a sequence to a single value
EKWSum.		ExpKW	::= "Sum" Exp;

-- Gives the mean value of a sequence. Same as Sum divided by Count
EKWMean.	ExpKW	::= "Mean" Exp; 

-- Gives squareroot of the value, or for each of the sequences values
-- Gives an error in negative values
EKWSqrt.	ExpKW	::= "Sqrt" Exp;

-- Gives nth root of the second parameter
EKWRoot.	ExpKW	::= "Root" Exp Exp;

-- Rounding operations. Truncation is the default when changing floats to ints.
EKWFloor.	ExpKW	::=	"Floor" Exp;	-- Rounds down
EKWCeil.	ExpKW	::= "Ceil" Exp;		-- Rounds up
EKWRound.	ExpKW	::= "Round" Exp;	-- Rounds towards nearest integer, 0.5 is rounded up
EKWTrunc.	ExpKW	::= "Trunc" Exp;	-- Rounds towards zero

-- Repeats the second expression according to the value of the first expression (must be positive integer).
-- Returns a list with each expression's value.
-- Possibility: Add a repeat statement that can only call statements and doesn't return anything.
EKWRepeat.	ExpKW	::= "Repeat" Exp Exp;

-- Performs accumulation/folding operation.
-- Also maps if there is only one parameter for the function
EKWAcc.		ExpKW	::= "Acc" VarIdent Exp;

-- Returns a string representation of the value
EKWToStr.	ExpKW	::= "ToString" Exp;

-- Returns a numeral representation of the string, or returns a sum of a sequence
EKWToNum.	ExpKW	::= "ToNumeral" Exp;

-- Converts a string to a sequence of letters
EKWToSeq.	ExpKW	::= "SplitString" Exp;

-- -- List operations -- --

separator Pred ",";

_.				Pred	::= Pred1;
_.				Pred1	::= Pred2;
_.				Pred2	::= Pred3;
_.				Pred3	::= "(" Pred ")";

--PredBranch.		Pred	::= Pred "," Pred;
PredAnd.		Pred1	::= Pred1 "&" Pred2;
PredOr.			Pred1	::= Pred1 "|" Pred2;
PredXOr.		Pred1	::= Pred1 "^" Pred2;

PredEQ.			Pred2	::= "=" Val;
--PredNEQ.		Pred2	::= "!=" Val;
PredGT.			Pred2	::= "<" Val;
PredLT.			Pred2	::= ">" Val;
PredGTEq.		Pred2	::= "<=" Val;
PredLTEq.		Pred2	::= ">=" Val;

-- Negates the predicate.
PredNot.	Pred3		::= "!" Pred;

-- Type predicates
PredIsInt.		Pred3	::= "#";
PredIsReal.		Pred3	::= "%";
PredIsStr.		Pred3	::= "$";
PredIsList.		Pred3	::= "{" Pred "}";

PredInd.		Pred3	::= Exp; -- Indexes. If the exp is a range then this slices

ESeqFilt.		Exp3	::= Exp "[" [Pred] "]"; -- Predicate expression, filters or indexes the vector


-- Function call --

ECall.	Exp4		::= VarIdent "(" [Exp] ")";


-- Statements --

SVarAs.		Stmt	::= VarIdent "=" Exp;
SVarAdd.	Stmt	::= VarIdent "+=" Exp;
SVarSub.	Stmt	::= VarIdent "-=" Exp;
SVarMul.	Stmt	::= VarIdent "*=" Exp;
SVarDiv.	Stmt	::= VarIdent "/=" Exp;

SFunDef.	Stmt	::= VarIdent "(" [Exp] ")" "=" Exp;

-- Clears the variable or function
SDelete.	Stmt	::= "Delete" VarIdent;
