-- Rules for the 'Roller' parser
-- Written in Labelled BNF grammar
-- mrZalli

ExpCmd.		Cmd ::= Exp;
StmtCmd.	Cmd ::= Stmt;

comment "#";
comment "#-" "-#";

-- Expressions

coercions Exp 3;

EAdd. 	Exp1 	::= Exp1 "+" Exp2;
ESub. 	Exp1 	::= Exp1 "-" Exp2;
EMul. 	Exp2 	::= Exp2 "*" Exp3;
EDiv. 	Exp2 	::= Exp2 "/" Exp3;
EInt. 	Exp3 	::= Integer;

ERange.	Exp3	::= "{" Val ".." Val "}";
ERStep.	Exp3	::= "{" Val "," Val ".." Val "}";
EList.	Exp3	::= "{" [ListMem] "}";


-- -- Dice expressions

EDice.	Exp3	::= ExpD;

E1d6.	ExpD	::= "d";
E1dN.	ExpD	::= "d" Exp3;
ENd6.	ExpD	::= Exp3 "d";
ENdN.	ExpD	::= Exp3 "d" Exp3;


-- -- Keyword functions

EKeyW.		Exp		::= ExpKW; -- (could this be Exp0?)

EKCount.	ExpKW	::= "Count" Exp; -- Gives the length of the list. Gives 1 for integers
EKSum.		ExpKW	::= "Sum" Exp; -- redundant?
EKRepeat.	ExpKW	::= "Repeat" Exp Exp; -- 'Repeat 3 1d6' is equivalent to 3d6
EKMean.		ExpKW	::= "Mean" Exp; -- Returns a real


-- -- List operations

coercions Pred 2;

PredBranch.	Pred1	::= Pred1 "," Pred2;
PredAnd.	Pred1	::= Pred1 "&" Pred2;
PredOr.		Pred1	::= Pred1 "|" Pred2;
PredXOr.	Pred1	::= Pred1 "^" Pred2;
PredEQ.		Pred2	::= "=" Val;
PredNEQ.	Pred2	::= "!=" Val;
PredGT.		Pred2	::= "<" Val;
PredLT.		Pred2	::= ">" Val;
PredGTEq.	Pred2	::= "<=" Val;
PredLTEq.	Pred2	::= ">=" Val;

EListOp.	Exp3	::= ExpLOp;

ELFilt.	ExpLOp	::= Exp "[" Pred "]"; -- Predicate expression filters the vector
ELSum.	ExpLOp	::= Exp "[" "+" "]";

-- Performs accumulation/folding operation.
-- The first parameter is the accumulator and the other parameters are the next values of the list.
-- Also maps if there is only one parameter
ELAcc.	ExpLOp	::= Exp "[" VarIdent "]";

{-
add a b = a + b
1d6[add]	is equivalent to 1d6[+]
2d6[add 4]	is equivalent to 2d6 + 4 * 2
foo(a, b, c) = a + b - c
{2, 3, 1, 5}[foo] -> 2 + 3 - 1 + 5
-}


-- Symbol-table stuff

EVar.	Exp3	::= VarIdent;
ECall.	Exp3	::= VarIdent "(" [Exp] ")";


-- Statements

SVarAs.	Stmt	::= VarIdent "=" Exp;
SFDef.	Stmt	::= VarIdent "(" [Exp] ")" "=" Exp;


-- Misc

-- An integer value. Constant during the expression they are used in
IntVal.		Val		::= Integer;
IntNegVal.	Val		::= "-" Integer;
VarVal.		Val		::= VarIdent;

-- Any value accepted to the set
ValLM.	ListMem	::= Val;
StrLM.	ListMem	::= String;

separator Exp ",";
separator ListMem ",";

-- Optional commas
-- EmptyList.	ListMem ::= ",";
-- _.			ListMem ::= ListMem ",";

token VarIdent		(letter | '_')+;
