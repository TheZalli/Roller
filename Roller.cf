-- Rules for the 'Roller' parser
-- Written in Labelled BNF grammar as used by bnfc
-- mrZalli

ExpCmd.		Cmd ::= Exp;
StmtCmd.	Cmd ::= Stmt;

token VarIdent	(letter | '_')+;
--token VarIdent	( ('a'-'c') | ('e'-'z') | upper ) ( letter | '_' )*;

comment "#";
comment "#-" "-#";

-- Expressions

coercions Exp 3;

EAdd. 	Exp1 	::= Exp1 "+" Exp2;
ESub. 	Exp1 	::= Exp1 "-" Exp2;
EMul. 	Exp2 	::= Exp2 "*" Exp3;
EDiv. 	Exp2 	::= Exp2 "/" Exp3;

separator Exp ",";

-- -- Values


-- An integer numeral value. Constant during the expression they are used in
IntNum.		Numeral	::= Integer;
IntNegNum.	Numeral	::= "-" Integer;

-- An integer literal, string or variable value

EVal. 	Exp3	::= Val;

ValNum.	Val	::= Numeral;
ValVar.	Val	::= VarIdent;
ValStr.	Val	::= String;

--separator Val ",";


-- -- Sequences

ESeq.		Exp3	::= ExpSeq;

ERange.		ExpSeq	::= "{" Exp ".." Exp "}"; -- Uses numeral values
ERStep.		ExpSeq	::= "{" Exp "," Exp ".." Exp "}"; -- Assumes linear sequence
EVect.		ExpSeq	::= "{" [Exp] "}";

-- -- Dice expressions

EDice.	Exp3	::= ExpD;

E1d6.	ExpD	::= "d";
E1dN.	ExpD	::= "d" Exp;
ENd6.	ExpD	::= Exp "d";
ENdN.	ExpD	::= Exp "d" Exp;


-- -- Keyword functions

EKeyW.		Exp		::= ExpKW; -- (could this be Exp0?)

EKCount.	ExpKW	::= "Count" Exp; -- Gives the length of the sequence. Gives 1 for scalars
EKSum.		ExpKW	::= "Sum" Exp; -- Gives the sum of the sequence. default operation when converting from a sequence to a single value
EKRepeat.	ExpKW	::= "Repeat" Exp Exp; -- 'Repeat 3 1d6' is equivalent to 3d6
EKMean.		ExpKW	::= "Mean" Exp; -- Returns a real

-- Performs accumulation/folding operation.
-- Also maps if there is only one parameter for the function
EKAcc.		ExpKW	::= "Acc" Exp VarIdent;

-- -- List operations

coercions Pred 3;

PredBranch.	Pred1	::= Pred1 "," Pred2;
PredAnd.	Pred1	::= Pred1 "&" Pred2;
PredOr.		Pred1	::= Pred1 "|" Pred2;
PredXOr.	Pred1	::= Pred1 "^" Pred2;

PredEQ.		Pred2	::= "=" Val;
PredNEQ.	Pred2	::= "!=" Val;
PredGT.		Pred2	::= "<" Val;
PredLT.		Pred2	::= ">" Val;
PredGTEq.	Pred2	::= "<=" Val;
PredLTEq.	Pred2	::= ">=" Val;

PredIsStr.	Pred3	::= "$" Val;
PredInd.	Pred3	::= Val; -- Indexes
PredRange.	Pred3	::= Val ".." Val; -- Takes a slice
PredRStep.	Pred3	::= Val "," Val ".." Val; -- Ditto but with a step value

ESeqFilt.	Exp3	::= Exp "[" Pred "]"; -- Predicate expression, filters or indexes the vector


-- Function call

ECall.	Exp3	::= VarIdent "(" [Exp] ")";


-- Statements

SVarAs.	Stmt	::= VarIdent "=" Exp;
SFDef.	Stmt	::= VarIdent "(" [Exp] ")" "=" Exp;
