/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  extern char *yytext;
  fprintf(stderr,"error: line %d: %s at %s\n", 
    yy_mylinenumber, str, yytext);
}



static Cmd* YY_RESULT_Cmd_ = 0;
Cmd* pCmd(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Cmd_;
  }
}
Cmd* pCmd(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Cmd_;
  }
}

static Exp* YY_RESULT_Exp_ = 0;
Exp* pExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}
Exp* pExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}

static ExpD* YY_RESULT_ExpD_ = 0;
ExpD* pExpD(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExpD_;
  }
}
ExpD* pExpD(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExpD_;
  }
}

static ExpKW* YY_RESULT_ExpKW_ = 0;
ExpKW* pExpKW(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExpKW_;
  }
}
ExpKW* pExpKW(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExpKW_;
  }
}

static Pred* YY_RESULT_Pred_ = 0;
Pred* pPred(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Pred_;
  }
}
Pred* pPred(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Pred_;
  }
}

static ExpLOp* YY_RESULT_ExpLOp_ = 0;
ExpLOp* pExpLOp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExpLOp_;
  }
}
ExpLOp* pExpLOp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExpLOp_;
  }
}

static Stmt* YY_RESULT_Stmt_ = 0;
Stmt* pStmt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}
Stmt* pStmt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}

static Val* YY_RESULT_Val_ = 0;
Val* pVal(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Val_;
  }
}
Val* pVal(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Val_;
  }
}

static ListMem* YY_RESULT_ListMem_ = 0;
ListMem* pListMem(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListMem_;
  }
}
ListMem* pListMem(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListMem_;
  }
}

static ListExp* YY_RESULT_ListExp_ = 0;
ListExp* pListExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExp_;
  }
}
ListExp* pListExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExp_;
  }
}

static ListListMem* YY_RESULT_ListListMem_ = 0;
ListListMem* pListListMem(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListListMem_;
  }
}
ListListMem* pListListMem(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListListMem_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Cmd* cmd_;
  Exp* exp_;
  ExpD* expd_;
  ExpKW* expkw_;
  Pred* pred_;
  ExpLOp* explop_;
  Stmt* stmt_;
  Val* val_;
  ListMem* listmem_;
  ListExp* listexp_;
  ListListMem* listlistmem_;
}

%token _ERROR_
%token _SYMB_0    //   (
%token _SYMB_1    //   )
%token _SYMB_2    //   +
%token _SYMB_3    //   -
%token _SYMB_4    //   *
%token _SYMB_5    //   /
%token _SYMB_6    //   {
%token _SYMB_7    //   ..
%token _SYMB_8    //   }
%token _SYMB_9    //   ,
%token _SYMB_10    //   &
%token _SYMB_11    //   |
%token _SYMB_12    //   ^
%token _SYMB_13    //   =
%token _SYMB_14    //   !=
%token _SYMB_15    //   <
%token _SYMB_16    //   >
%token _SYMB_17    //   <=
%token _SYMB_18    //   >=
%token _SYMB_19    //   [
%token _SYMB_20    //   ]
%token _SYMB_21    //   Count
%token _SYMB_22    //   Mean
%token _SYMB_23    //   Repeat
%token _SYMB_24    //   Sum
%token _SYMB_25    //   d
%token<string_> _SYMB_26    //   VarIdent

%type <cmd_> Cmd
%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2
%type <exp_> Exp3
%type <expd_> ExpD
%type <expkw_> ExpKW
%type <pred_> Pred
%type <pred_> Pred1
%type <pred_> Pred2
%type <explop_> ExpLOp
%type <stmt_> Stmt
%type <val_> Val
%type <listmem_> ListMem
%type <listexp_> ListExp
%type <listlistmem_> ListListMem

%start Cmd
%token<string_> _STRING_
%token<int_> _INTEGER_

%%
Cmd : Exp {  $$ = new ExpCmd($1); YY_RESULT_Cmd_= $$; } 
  | Stmt {  $$ = new StmtCmd($1); YY_RESULT_Cmd_= $$; }
;
Exp : Exp1 {  $$ = $1; YY_RESULT_Exp_= $$; } 
  | ExpKW {  $$ = new EKeyW($1); YY_RESULT_Exp_= $$; }
;
Exp1 : Exp2 {  $$ = $1; YY_RESULT_Exp_= $$; } 
  | Exp1 _SYMB_2 Exp2 {  $$ = new EAdd($1, $3); YY_RESULT_Exp_= $$; }
  | Exp1 _SYMB_3 Exp2 {  $$ = new ESub($1, $3); YY_RESULT_Exp_= $$; }
;
Exp2 : Exp3 {  $$ = $1; YY_RESULT_Exp_= $$; } 
  | Exp2 _SYMB_4 Exp3 {  $$ = new EMul($1, $3); YY_RESULT_Exp_= $$; }
  | Exp2 _SYMB_5 Exp3 {  $$ = new EDiv($1, $3); YY_RESULT_Exp_= $$; }
;
Exp3 : _SYMB_0 Exp _SYMB_1 {  $$ = $2; YY_RESULT_Exp_= $$; } 
  | _INTEGER_ {  $$ = new EInt($1); YY_RESULT_Exp_= $$; }
  | _SYMB_6 Val _SYMB_7 Val _SYMB_8 {  $$ = new ERange($2, $4); YY_RESULT_Exp_= $$; }
  | _SYMB_6 Val _SYMB_9 Val _SYMB_7 Val _SYMB_8 {  $$ = new ERStep($2, $4, $6); YY_RESULT_Exp_= $$; }
  | _SYMB_6 ListListMem _SYMB_8 {  std::reverse($2->begin(),$2->end()) ;$$ = new EList($2); YY_RESULT_Exp_= $$; }
  | ExpD {  $$ = new EDice($1); YY_RESULT_Exp_= $$; }
  | ExpLOp {  $$ = new EListOp($1); YY_RESULT_Exp_= $$; }
  | _SYMB_26 {  $$ = new EVar($1); YY_RESULT_Exp_= $$; }
  | _SYMB_26 _SYMB_0 ListExp _SYMB_1 {  std::reverse($3->begin(),$3->end()) ;$$ = new ECall($1, $3); YY_RESULT_Exp_= $$; }
;
ExpD : _SYMB_25 {  $$ = new E1d6(); YY_RESULT_ExpD_= $$; } 
  | _SYMB_25 Exp3 {  $$ = new E1dN($2); YY_RESULT_ExpD_= $$; }
  | Exp3 _SYMB_25 {  $$ = new ENd6($1); YY_RESULT_ExpD_= $$; }
  | Exp3 _SYMB_25 Exp3 {  $$ = new ENdN($1, $3); YY_RESULT_ExpD_= $$; }
;
ExpKW : _SYMB_21 Exp {  $$ = new EKCount($2); YY_RESULT_ExpKW_= $$; } 
  | _SYMB_24 Exp {  $$ = new EKSum($2); YY_RESULT_ExpKW_= $$; }
  | _SYMB_23 Exp Exp {  $$ = new EKRepeat($2, $3); YY_RESULT_ExpKW_= $$; }
  | _SYMB_22 Exp {  $$ = new EKMean($2); YY_RESULT_ExpKW_= $$; }
;
Pred : Pred1 {  $$ = $1; YY_RESULT_Pred_= $$; } 
;
Pred1 : Pred2 {  $$ = $1; YY_RESULT_Pred_= $$; } 
  | Pred1 _SYMB_9 Pred2 {  $$ = new PredBranch($1, $3); YY_RESULT_Pred_= $$; }
  | Pred1 _SYMB_10 Pred2 {  $$ = new PredAnd($1, $3); YY_RESULT_Pred_= $$; }
  | Pred1 _SYMB_11 Pred2 {  $$ = new PredOr($1, $3); YY_RESULT_Pred_= $$; }
  | Pred1 _SYMB_12 Pred2 {  $$ = new PredXOr($1, $3); YY_RESULT_Pred_= $$; }
;
Pred2 : _SYMB_0 Pred _SYMB_1 {  $$ = $2; YY_RESULT_Pred_= $$; } 
  | _SYMB_13 Val {  $$ = new PredEQ($2); YY_RESULT_Pred_= $$; }
  | _SYMB_14 Val {  $$ = new PredNEQ($2); YY_RESULT_Pred_= $$; }
  | _SYMB_15 Val {  $$ = new PredGT($2); YY_RESULT_Pred_= $$; }
  | _SYMB_16 Val {  $$ = new PredLT($2); YY_RESULT_Pred_= $$; }
  | _SYMB_17 Val {  $$ = new PredGTEq($2); YY_RESULT_Pred_= $$; }
  | _SYMB_18 Val {  $$ = new PredLTEq($2); YY_RESULT_Pred_= $$; }
;
ExpLOp : Exp _SYMB_19 Pred _SYMB_20 {  $$ = new ELFilt($1, $3); YY_RESULT_ExpLOp_= $$; } 
  | Exp _SYMB_19 _SYMB_2 _SYMB_20 {  $$ = new ELSum($1); YY_RESULT_ExpLOp_= $$; }
  | Exp _SYMB_19 _SYMB_26 _SYMB_20 {  $$ = new ELAcc($1, $3); YY_RESULT_ExpLOp_= $$; }
;
Stmt : _SYMB_26 _SYMB_13 Exp {  $$ = new SVarAs($1, $3); YY_RESULT_Stmt_= $$; } 
  | _SYMB_26 _SYMB_0 ListExp _SYMB_1 _SYMB_13 Exp {  std::reverse($3->begin(),$3->end()) ;$$ = new SFDef($1, $3, $6); YY_RESULT_Stmt_= $$; }
;
Val : _INTEGER_ {  $$ = new IntVal($1); YY_RESULT_Val_= $$; } 
  | _SYMB_3 _INTEGER_ {  $$ = new IntNegVal($2); YY_RESULT_Val_= $$; }
  | _SYMB_26 {  $$ = new VarVal($1); YY_RESULT_Val_= $$; }
;
ListMem : Val {  $$ = new ValLM($1); YY_RESULT_ListMem_= $$; } 
  | _STRING_ {  $$ = new StrLM($1); YY_RESULT_ListMem_= $$; }
;
ListExp : /* empty */ {  $$ = new ListExp(); YY_RESULT_ListExp_= $$; } 
  | Exp {  $$ = new ListExp() ; $$->push_back($1); YY_RESULT_ListExp_= $$; }
  | Exp _SYMB_9 ListExp {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListExp_= $$; }
;
ListListMem : /* empty */ {  $$ = new ListListMem(); YY_RESULT_ListListMem_= $$; } 
  | ListMem {  $$ = new ListListMem() ; $$->push_back($1); YY_RESULT_ListListMem_= $$; }
  | ListMem _SYMB_9 ListListMem {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListListMem_= $$; }
;

